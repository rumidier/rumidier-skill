C언어 메모리 구조 (page 324)

13-1 하드웨어 관점에서의 메모리 공간
 1.하드디스크(hard disk)
 2.램(RAM)
 3.캐쉬(cache)
 4.레지스터(register)

하드 디스크와 CPU만 있다면?
데이터를 읽고 쓰는데 너무 많은 시간이 걸린다.
해결법
RAM(main memory) 를 추가하여 실행속도를 향상 시킨다.

캐쉬(cache)
	cpu 안에 ALU와 램사이에 캐쉬가 삽입되어 속도를 향상시킨다

레지스터
	산순연산을 포함하여 연산의 결과는 레지스터에 저장된다
	함수의 반환 값도 레지스터에 저장된다
	따라서 별도의 변수에 연산 결과를 저장 하지 않는다면 
	레지스터에 머물다가 소멸된다

메모리 계층도
사진
가상메모리
운영체제가 통으로 구성해주는 메모리를 가리켜 (사진)

메모리 공간이 필요한 이유
1.프로그램의 실행과정에서 선언하는 변수의 메모리 공간 할당
2.프로그램의 실행 과정에서 사용되는 상수의 표현
3.연산 및 호출된 함수의 반환 값을 임시로 저장하기 위해

프로그램을 가상 메모리 전부를 사용한다
 1. 가상메모리는 나눠서 사용해야 효율적인 사용이 가능하다
 2.나누어진 영역별로 특성을 부여해야 활용도를 높일수 있다.

 가상 메모리를 나누는 기준
   1.코드 영역
    실행할 프로그램 코드 (main, 기타함수)
   2.데이터 영역
    프로그램이 종료될 때까지 유지해야 할 데이터를 저장할 공간(전역 변수, static 변수)
   3.힙 영역
    프로그래머가 원하는 형태로 쓸 수있는 공간(동적할당)
   4.스택 영역
    아주 잠깐 사용하고 삭제할 데이터의 저장공간 (일반 변수)

전역 변수와 지역 변수의 한계를 극복할 힙 영역 (동적할당:dynamic allocation)
	힙 영역에 메모리 공간을 할당하는 malloc, calloc,realloc

malloc
void *malloc (size_t size);
free
void free(void *ptr);
calloc
void *calloc (size_t elt_count, size_t elt_size);
realloc
void *reallo (void *ptr, size_t size);
